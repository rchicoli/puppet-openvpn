# == Define: openvpn::ca
#
# This define creates the openvpn ca and ssl certificates
#
# === Parameters
#
# [*country*]
#   String.  Country to be used for the SSL certificate
#
# [*province*]
#   String.  Province to be used for the SSL certificate
#
# [*city*]
#   String.  City to be used for the SSL certificate
#
# [*organization*]
#   String.  Organization to be used for the SSL certificate
#
# [*email*]
#   String.  Email address to be used for the SSL certificate
#
# [*common_name*]
#   String.  Common name to be used for the SSL certificate
#
# [*group*]
#   String.  User to drop privileges to after startup
#
# [*ssl_key_size*]
#   String. Length of SSL keys (in bits) generated by this module.
#
# [*key_expire*]
#   String.  The number of days to certify the server certificate for
#
# [*ca_expire*]
#   String.  The number of days to certify the CA certificate for
#
# [*key_name*]
#   String.  Value for name_default variable in openssl.cnf and
#     KEY_NAME in vars
#
# [*key_ou*]
#   String.  Value for organizationalUnitName_default variable in openssl.cnf
#     and KEY_OU in vars
#
# [*key_cn*]
#   String.  Value for commonName_default variable in openssl.cnf
#     and KEY_CN in vars
#
# === Examples
#
#   openvpn::ca {
#     'my_user':
#       server      => 'contractors',
#       remote_host => 'vpn.mycompany.com'
#    }
#
# === Authors
#
# * Rafael Chicoli <mailto:rafael_chicoli@yahoo.com.br>
# * Raffael Schmid <mailto:raffael@yux.ch>
# * John Kinsella <mailto:jlkinsel@gmail.com>
# * Justin Lambert <mailto:jlambert@letsevenup.com>
#
# === License
#
# Copyright 2013 Rafael Chicoli, <rafael_chicoli@yahoo.com.br>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
define openvpn::ca(
  $country,
  $province,
  $city,
  $organization,
  $email,
  $common_name = 'server',
  $group = false,
  $ssl_key_size = 1024,
  $ca_expire = 3650,
  $key_expire = 3650,
  $key_cn = '',
  $key_name = '',
  $key_ou = '',
) {

  include openvpn

  $group_to_set = $group ? {
    false   => $openvpn::params::group,
    default => $group
  }

  File {
    group   => $group_to_set,
  }

  exec { "copy easy-rsa to openvpn config folder ${name}":
    command => "/bin/cp -r ${openvpn::params::easyrsa_source} /etc/openvpn/${name}/easy-rsa",
    creates => "/etc/openvpn/${name}/easy-rsa",
    notify  => Exec["fix_easyrsa_file_permissions_${name}"],
    require => File["/etc/openvpn/${name}"],
  }

  exec { "fix_easyrsa_file_permissions_${name}":
    refreshonly => true,
    command     => "/bin/chmod 750 /etc/openvpn/${name}/easy-rsa/*",
  }

  file { "/etc/openvpn/${name}/easy-rsa/revoked":
    ensure  => directory,
    mode    => '0750',
    recurse => true,
    require => Exec["copy easy-rsa to openvpn config folder ${name}"],
  }

  file { "/etc/openvpn/${name}/easy-rsa/vars":
    ensure  => present,
    content => template('openvpn/vars.erb'),
    require => Exec["copy easy-rsa to openvpn config folder ${name}"],
  }

  file { "/etc/openvpn/${name}/easy-rsa/openssl.cnf":
    require => Exec["copy easy-rsa to openvpn config folder ${name}"],
  }

  if $openvpn::params::link_openssl_cnf == true {
    File["/etc/openvpn/${name}/easy-rsa/openssl.cnf"] {
      ensure => link,
      target => "/etc/openvpn/${name}/easy-rsa/openssl-1.0.0.cnf"
    }
  }

  exec { "generate dh param ${name}":
    command  => '. ./vars && ./clean-all && ./build-dh',
    cwd      => "/etc/openvpn/${name}/easy-rsa",
    creates  => "/etc/openvpn/${name}/easy-rsa/keys/dh${ssl_key_size}.pem",
    provider => 'shell',
    require  => File["/etc/openvpn/${name}/easy-rsa/vars"],
  }

  exec { "initca ${name}":
    command  => '. ./vars && ./pkitool --initca',
    cwd      => "/etc/openvpn/${name}/easy-rsa",
    creates  => "/etc/openvpn/${name}/easy-rsa/keys/ca.key",
    provider => 'shell',
    require  => [
      Exec["generate dh param ${name}"],
      File["/etc/openvpn/${name}/easy-rsa/openssl.cnf"]
    ],
  }

  exec { "generate server cert ${name}":
    command  => ". ./vars && ./pkitool --server ${common_name}",
    cwd      => "/etc/openvpn/${name}/easy-rsa",
    creates  => "/etc/openvpn/${name}/easy-rsa/keys/${common_name}.key",
    provider => 'shell',
    require  => Exec["initca ${name}"],
  }

  file { "/etc/openvpn/${name}/keys":
    ensure  => link,
    target  => "/etc/openvpn/${name}/easy-rsa/keys",
    require => Exec["copy easy-rsa to openvpn config folder ${name}"],
  }

  file { "/etc/openvpn/${name}/crl.pem":
    mode    => '0640',
    group   =>  $group_to_set,
    require => [Exec["create crl.pem on ${name}"], File["/etc/openvpn/${name}"]],
  }

  exec { "create crl.pem on ${name}":
    command  => ". ./vars && KEY_CN='' KEY_OU='' KEY_NAME='' KEY_ALTNAMES='' openssl ca -gencrl -out /etc/openvpn/${name}/crl.pem -config /etc/openvpn/${name}/easy-rsa/openssl.cnf",
    cwd      => "/etc/openvpn/${name}/easy-rsa",
    creates  => "/etc/openvpn/${name}/crl.pem",
    provider => 'shell',
    require  => Exec["generate server cert ${name}"],
  }

  file { "/etc/openvpn/${name}/easy-rsa/keys/crl.pem":
    ensure  => link,
    target  => "/etc/openvpn/${name}/crl.pem",
    require => Exec["create crl.pem on ${name}"],
  }

}
