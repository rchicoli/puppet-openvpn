# == Define: openvpn::server
#
# This define creates the openvpn server instance which can run in server or client mode.
#
# === Parameters
#
# [*country*]
#   String.  Country to be used for the SSL certificate, mandatory for server mode.
#
# [*province*]
#   String.  Province to be used for the SSL certificate, mandatory for server mode.
#
# [*city*]
#   String.  City to be used for the SSL certificate, mandatory for server mode.
#
# [*organization*]
#   String.  Organization to be used for the SSL certificate, mandatory for server mode.
#
# [*email*]
#   String.  Email address to be used for the SSL certificate, mandatory for server mode.
#
# [*remote*]
#   Array.   List of OpenVPN endpoints to connect to.
#
# [*common_name*]
#   String.  Common name to be used for the SSL certificate
#
# [*compression*]
#   String.  Which compression algorithim to use
#   Options: comp-lzo or '' (disable compression)
#
# [*dev*]
#   String.  TUN/TAP virtual network device
#   Options: tunX (routed connections), tapX (bridged connections). X
#   can be omitted for a dynamic device.
#
# [*user*]
#   String.  Group to drop privileges to after startup
#
# [*group*]
#   String.  User to drop privileges to after startup
#
# [*ipp*]
#   Boolean.  Persist ifconfig information to a file to retain client IP
#     addresses between sessions
#
# [*duplicate_cn*]
#   Boolean.  Allow multiple connections on one cn
#
# [*local*]
#   String.  Interface for openvpn to bind to.
#   Options: An IP address or '' to bind to all ip addresses
#
# [*logfile*]
#   String.  Logfile for this openvpn server
#   Options: false (syslog) or log file name
#
# [*port*]
#   Integer.  The port the openvpn server service is running on
#
# [*proto*]
#   String.  What IP protocol is being used.
#   Options: tcp or udp
#
# [*status_log*]
#   String.  Logfile for periodic dumps of the vpn service status
#
# [*status_version*]
#   Integer. Choose the status file format version number. Can be 1, 2 or 3 and defaults to 1
#
# [*server*]
#   String.  Network to assign client addresses out of
#
# [*server_ipv6*]
#   String.  IPv6 network to assign client addresses out of
#
# [*server_bridge*]
#   String. Server configuration to comply with existing DHCP server
#
# [*push*]
#   Array.  Options to push out to the client.  This can include routes, DNS
#     servers, DNS search domains, and many other options.
#
# [*route*]
#   Array.  Add route to routing table after connection is established.
#     Multiple routes can be specified.
#
# [*keepalive*]
#   String.  Add keepalive directive (ping and ping-restart) to server.
#     Should match the form "n m".
#
# [*ssl_key_size*]
#   String. Length of SSL keys (in bits) generated by this module.
#
# [*topology*]
#   String. Define the network topology type
#
# [*c2c*]
#   Boolean.  Enable client to client visibility
#
# [*tcp-nodelay*]
#   Boolean, Enable/Disable.
#
# [*ccd-exclusive*]
#   Boolean, Enable/Disable.
#
# [*pam*]
#   Boolean, Enable/Disable.
#
# [*management*]
#   Boolean.  Enable management interface
#
# [*management_ip*]
#   String.  IP address where the management interface will listen
#
# [*management_port*]
#   String.  Port where the management interface will listen
#
# [*up*]
#   String,  Script which we want to run when openvpn server starts
#
# [*down*]
#   String,  Script which we want to run when openvpn server stops
#
# [*username_as_common_name*]
#   Boolean. If true then set username-as-common-name
#
# [*client_cert_not_required*]
#   Boolean. If true then set client-cert-not-required
#
# [*ldap_enabled*]
#   Boolean. If ldap is enabled, do stuff
#
# [*ldap_server*]
#   String. URL of LDAP server. ie. ldap://URL:PORT
#
# [*ldap_binddn*]
#   String. LDAP DN to bind as
#
# [*ldap_bindpass*]
#   String. LDAP password for ldapbinddn
#
# [*ldap_u_basedn*]
#   String. Place in the LDAP tree to look for users
#
# [*ldap_u_filter*]
#   String. User SearchFilter for LDAP accounts
#
# [*ldap_g_basedn*]
#   String. Place in the LDAP tree to look for groups
#
# [*ldap_gmember*]
#   Boolean. If defined use group block in ldap.conf
#
# [*ldap_g_filter*]
#   String. Group SearchFilter for LDAP accounts
#
# [*ldap_memberatr*]
#   String. Attribute for MemberAttribute. Used with ldapfilter
#
# [*ldap_tls_enable*]
#   Boolean. Enable TLS for the LDAP authentication
#
# [*ldap_tls_ca_cert_file*]
#   String. LDAP TLS authentication: path to the CA certificate.
#
# [*ldap_tls_ca_cert_dir*]
#   String. LDAP TLS authentication: path to the CA certificates.
#
# [*ldap_tls_client_cert_file*]
#   String. LDAP TLS authentication: path to the tls client certificate
#
# [*ldap_tls_client_key_file*]
#   String. LDAP TLS authentication: path to the tls client key
#
# [*verb*]
#   Integer.  Level of logging verbosity
#
# [*cipher*]
#   String,  Cipher to use for packet encryption
#
# [*persist_key*]
#   Boolean.  Try to retain access to resources that may be unavailable
#     because of privilege downgrades
#
# [*persist_tun*]
#   Boolean.  Try to retain access to resources that may be unavailable
#     because of privilege downgrades
#
# [*key_expire*]
#   String.  The number of days to certify the server certificate for
#
# [*ca_expire*]
#   String.  The number of days to certify the CA certificate for
#
# [*key_name*]
#   String.  Value for name_default variable in openssl.cnf and
#     KEY_NAME in vars
#
# [*key_ou*]
#   String.  Value for organizationalUnitName_default variable in openssl.cnf
#     and KEY_OU in vars
#
# [*key_cn*]
#   String.  Value for commonName_default variable in openssl.cnf
#     and KEY_CN in vars
#
# [*server_poll_timeout*]
#   Integer. Value for timeout before trying the next server.
#
# [*ping_timer_rem*]
#   Boolean. Do not start clocking timeouts until a remote peer connects.
#
# === Examples
#
#   openvpn::client {
#     'my_user':
#       server      => 'contractors',
#       remote_host => 'vpn.mycompany.com'
#    }
#
#
# === Authors
#
# * Rafael Chicoli <mailto:rafael_chicoli@yahoo.com.br>
# * Raffael Schmid <mailto:raffael@yux.ch>
# * John Kinsella <mailto:jlkinsel@gmail.com>
# * Justin Lambert <mailto:jlambert@letsevenup.com>
#
# === License
#
# Copyright 2013 Rafael Chicoli, <rafael_chicoli@yahoo.com.br>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
define openvpn::server(
  $auth                      = '',
  $c2c                       = false,
  $ca_expire                 = 3650,
  $ccd_exclusive             = false,
  $cipher                    = '',
  $city                      = undef,
  $client_cert_not_required  = false,
  $common_name               = 'server',
  $compression               = 'comp-lzo',
  $country                   = undef,
  $dev                       = 'tun0',
  $down                      = '',
  $duplicate_cn              = false,
  $email                     = undef,
  $group                     = false,
  $ipp                       = false,
  $keepalive                 = '',
  $key_cn                    = '',
  $key_expire                = 3650,
  $key_name                  = '',
  $key_ou                    = '',
  $ldap_binddn               = '',
  $ldap_bindpass             = '',
  $ldap_enabled              = false,
  $ldap_g_basedn             = '',
  $ldap_g_filter             = '',
  $ldap_gmember              = false,
  $ldap_memberatr            = '',
  $ldap_server               = '',
  $ldap_tls_ca_cert_dir      = '',
  $ldap_tls_ca_cert_file     = '',
  $ldap_tls_client_cert_file = '',
  $ldap_tls_client_key_file  = '',
  $ldap_tls_enable           = false,
  $ldap_u_basedn             = '',
  $ldap_u_filter             = '',
  $local                     = $::ipaddress_eth0,
  $logfile                   = false,
  $management                = false,
  $management_ip             = 'localhost',
  $management_port           = 7505,
  $organization              = undef,
  $pam                       = false,
  $persist_key               = false,
  $persist_tun               = false,
  $ping_timer_rem            = false,
  $port                      = '1194',
  $proto                     = 'tcp',
  $province                  = undef,
  $push                      = [],
  $remote                    = undef,
  $route                     = [],
  $server                    = "${name}",
  $server_bridge             = '',
  $server_ipv6               = '',
  $server_poll_timeout       = undef,
  $ssl_key_size              = 1024,
  $status_log                = "${name}/openvpn-status.log",
  $status_version            = '',
  $tcp_nodelay               = false,
  $tls_auth                  = false,
  $topology                  = '',
  $tun_mtu                   = '',
  $up                        = '',
  $user                      = 'nobody',
  $username_as_common_name   = false,
  $verb                      = '',
) {

  include ::openvpn

  $openvpn_root_dir          = "${openvpn::params::openvpn_root_dir}"

  Class['openvpn::install'] ->
  Openvpn::Server[$name] ~>
  Class['openvpn::service']

  $tls_server = $proto ? {
    /tcp/   => true,
    default => false
  }

  if $tls_auth == true {
    exec { "generate-ta-key-for-${name}":
        command => 'openvpn --genkey --secret ta.key',
        cwd     => '/etc/openvpn/terminal/keys',
        creates => '/etc/openvpn/terminal/keys/ta.key',
        path    => ['/usr/sbin','/bin']
    } ~>
    exec { "create-hardlink-for-ta-key-${name}":
        command     => 'ln /etc/openvpn/terminal/keys/ta.key /tmp/ ',
        path    => ['/usr/sbin','/bin'],
        refreshonly => 'true'
    }
  }

  $group_to_set = $group ? {
    false   => $openvpn::params::group,
    default => $group
  }

  File {
    group   => $group_to_set,
  }

  file { "/etc/openvpn/${name}":
    ensure  => directory,
    mode    => '0750',
  }

  if $remote == undef {
    # VPN Server Mode
    if $country == undef { fail("country has to be specified in server mode") }
    if $province == undef { fail("province has to be specified in server mode") }
    if $city == undef { fail("city has to be specified in server mode") }
    if $organization == undef { fail("organization has to be specified in server mode") }
    if $email == undef { fail("email has to be specified in server mode") }

    file {
      [ "/etc/openvpn/${name}/auth",
      "/etc/openvpn/${name}/client-configs",
      "/etc/openvpn/${name}/download-configs" ]:
        ensure  => directory,
        mode    => '0750',
        recurse => true,
    }

    ::openvpn::ca { $name:
      country      => $country,
      province     => $province,
      city         => $city,
      organization => $organization,
      email        => $email,
      common_name  => $common_name,
      group        => $group,
      ssl_key_size => $ssl_key_size,
      ca_expire    => $ca_expire,
      key_expire   => $key_expire,
      key_cn       => $key_cn,
      key_name     => $key_name,
      key_ou       => $key_ou,
    }
  } else {
    # VPN Client Mode

    file { "/etc/openvpn/${name}/keys":
      ensure  => directory,
      mode    => '0750',
      recurse => true,
    }
  }

  if $::osfamily == 'Debian' {
    concat::fragment {
      "openvpn.default.autostart.${name}":
        content => "AUTOSTART=\"\$AUTOSTART ${name}\"\n",
        target  => '/etc/default/openvpn',
        order   => 10;
    }
  }

  file { "/etc/openvpn/${name}.conf":
    owner   => root,
    group   => root,
    mode    => '0440',
    content => template('openvpn/server.erb');
  }

  if $ldap_enabled == true {
    file {
      "/etc/openvpn/${name}/auth/ldap.conf":
        ensure  => present,
        content => template('openvpn/ldap.erb'),
        require => Package['openvpn-auth-ldap'],
    }
  }

}
